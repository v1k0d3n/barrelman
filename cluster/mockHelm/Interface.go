// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import chart "k8s.io/helm/pkg/proto/hapi/chart"
import helm "k8s.io/helm/pkg/helm"
import mock "github.com/stretchr/testify/mock"
import services "k8s.io/helm/pkg/proto/hapi/services"

// Interface is an autogenerated mock type for the Interface type
type Interface struct {
	mock.Mock
}

// DeleteRelease provides a mock function with given fields: rlsName, opts
func (_m *Interface) DeleteRelease(rlsName string, opts ...helm.DeleteOption) (*services.UninstallReleaseResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, rlsName)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *services.UninstallReleaseResponse
	if rf, ok := ret.Get(0).(func(string, ...helm.DeleteOption) *services.UninstallReleaseResponse); ok {
		r0 = rf(rlsName, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*services.UninstallReleaseResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ...helm.DeleteOption) error); ok {
		r1 = rf(rlsName, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVersion provides a mock function with given fields: opts
func (_m *Interface) GetVersion(opts ...helm.VersionOption) (*services.GetVersionResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *services.GetVersionResponse
	if rf, ok := ret.Get(0).(func(...helm.VersionOption) *services.GetVersionResponse); ok {
		r0 = rf(opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*services.GetVersionResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(...helm.VersionOption) error); ok {
		r1 = rf(opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InstallRelease provides a mock function with given fields: chStr, namespace, opts
func (_m *Interface) InstallRelease(chStr string, namespace string, opts ...helm.InstallOption) (*services.InstallReleaseResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, chStr, namespace)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *services.InstallReleaseResponse
	if rf, ok := ret.Get(0).(func(string, string, ...helm.InstallOption) *services.InstallReleaseResponse); ok {
		r0 = rf(chStr, namespace, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*services.InstallReleaseResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, ...helm.InstallOption) error); ok {
		r1 = rf(chStr, namespace, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InstallReleaseFromChart provides a mock function with given fields: _a0, namespace, opts
func (_m *Interface) InstallReleaseFromChart(_a0 *chart.Chart, namespace string, opts ...helm.InstallOption) (*services.InstallReleaseResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, namespace)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *services.InstallReleaseResponse
	if rf, ok := ret.Get(0).(func(*chart.Chart, string, ...helm.InstallOption) *services.InstallReleaseResponse); ok {
		r0 = rf(_a0, namespace, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*services.InstallReleaseResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*chart.Chart, string, ...helm.InstallOption) error); ok {
		r1 = rf(_a0, namespace, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListReleases provides a mock function with given fields: opts
func (_m *Interface) ListReleases(opts ...helm.ReleaseListOption) (*services.ListReleasesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *services.ListReleasesResponse
	if rf, ok := ret.Get(0).(func(...helm.ReleaseListOption) *services.ListReleasesResponse); ok {
		r0 = rf(opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*services.ListReleasesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(...helm.ReleaseListOption) error); ok {
		r1 = rf(opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PingTiller provides a mock function with given fields:
func (_m *Interface) PingTiller() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReleaseContent provides a mock function with given fields: rlsName, opts
func (_m *Interface) ReleaseContent(rlsName string, opts ...helm.ContentOption) (*services.GetReleaseContentResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, rlsName)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *services.GetReleaseContentResponse
	if rf, ok := ret.Get(0).(func(string, ...helm.ContentOption) *services.GetReleaseContentResponse); ok {
		r0 = rf(rlsName, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*services.GetReleaseContentResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ...helm.ContentOption) error); ok {
		r1 = rf(rlsName, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReleaseHistory provides a mock function with given fields: rlsName, opts
func (_m *Interface) ReleaseHistory(rlsName string, opts ...helm.HistoryOption) (*services.GetHistoryResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, rlsName)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *services.GetHistoryResponse
	if rf, ok := ret.Get(0).(func(string, ...helm.HistoryOption) *services.GetHistoryResponse); ok {
		r0 = rf(rlsName, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*services.GetHistoryResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ...helm.HistoryOption) error); ok {
		r1 = rf(rlsName, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReleaseStatus provides a mock function with given fields: rlsName, opts
func (_m *Interface) ReleaseStatus(rlsName string, opts ...helm.StatusOption) (*services.GetReleaseStatusResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, rlsName)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *services.GetReleaseStatusResponse
	if rf, ok := ret.Get(0).(func(string, ...helm.StatusOption) *services.GetReleaseStatusResponse); ok {
		r0 = rf(rlsName, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*services.GetReleaseStatusResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ...helm.StatusOption) error); ok {
		r1 = rf(rlsName, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RollbackRelease provides a mock function with given fields: rlsName, opts
func (_m *Interface) RollbackRelease(rlsName string, opts ...helm.RollbackOption) (*services.RollbackReleaseResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, rlsName)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *services.RollbackReleaseResponse
	if rf, ok := ret.Get(0).(func(string, ...helm.RollbackOption) *services.RollbackReleaseResponse); ok {
		r0 = rf(rlsName, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*services.RollbackReleaseResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ...helm.RollbackOption) error); ok {
		r1 = rf(rlsName, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunReleaseTest provides a mock function with given fields: rlsName, opts
func (_m *Interface) RunReleaseTest(rlsName string, opts ...helm.ReleaseTestOption) (<-chan *services.TestReleaseResponse, <-chan error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, rlsName)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 <-chan *services.TestReleaseResponse
	if rf, ok := ret.Get(0).(func(string, ...helm.ReleaseTestOption) <-chan *services.TestReleaseResponse); ok {
		r0 = rf(rlsName, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan *services.TestReleaseResponse)
		}
	}

	var r1 <-chan error
	if rf, ok := ret.Get(1).(func(string, ...helm.ReleaseTestOption) <-chan error); ok {
		r1 = rf(rlsName, opts...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(<-chan error)
		}
	}

	return r0, r1
}

// UpdateRelease provides a mock function with given fields: rlsName, chStr, opts
func (_m *Interface) UpdateRelease(rlsName string, chStr string, opts ...helm.UpdateOption) (*services.UpdateReleaseResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, rlsName, chStr)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *services.UpdateReleaseResponse
	if rf, ok := ret.Get(0).(func(string, string, ...helm.UpdateOption) *services.UpdateReleaseResponse); ok {
		r0 = rf(rlsName, chStr, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*services.UpdateReleaseResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, ...helm.UpdateOption) error); ok {
		r1 = rf(rlsName, chStr, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateReleaseFromChart provides a mock function with given fields: rlsName, _a1, opts
func (_m *Interface) UpdateReleaseFromChart(rlsName string, _a1 *chart.Chart, opts ...helm.UpdateOption) (*services.UpdateReleaseResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, rlsName, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *services.UpdateReleaseResponse
	if rf, ok := ret.Get(0).(func(string, *chart.Chart, ...helm.UpdateOption) *services.UpdateReleaseResponse); ok {
		r0 = rf(rlsName, _a1, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*services.UpdateReleaseResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *chart.Chart, ...helm.UpdateOption) error); ok {
		r1 = rf(rlsName, _a1, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

package e2e

import (
	"fmt"
	"log"
	"os/exec"
	"strings"
	"time"
)

func WaitForPodsRunningState(manifestNS string, expectedPodCount int) error {
	expectedPodCount = expectedPodCount+1
	for now := time.Now(); ; {
		kubecmd := "kubectl get pods -n " + manifestNS + " --field-selector status.phase=Running | wc -l"
		outCount, err := exec.Command("/bin/bash", "-c", kubecmd).CombinedOutput()
		if err != nil {
			return err
		}
		fmt.Fprintln(os.Stdout, string(expectedPodCount))
		fmt.Fprintln(os.Stdout, string(outCount))
		if strings.Compare(string(expectedPodCount), string(outCount)) == 0 {
			break
		}
		timeout(now, 20, "waiting for pods to result in Running State")
	}
	return nil
}

func timeout(currentTime time.Time, sec int, msg string) {
	if time.Since(currentTime) > time.Second*time.Duration(sec) {
		log.Panic("Timed-out:", sec, "seconds, ", msg)
        }
}
